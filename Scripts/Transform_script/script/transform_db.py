def GetAppTable(host, username, password, PatentDb):

    """
    This function is designed to grab application table from the latest stable granted Patents DB.

    :param host: DB IP address
    :param username: username
    :param password: password
    :param WorkingDirectory: tell the machine where we are working on and saving the files
    :param PatentDb: please specify where we are obtaining the data

    :return: a large list that contains all the Patent info
    """

    # Create DB connection
    DBconnection = MySQLdb.connect(host=host, user=username, passwd=password)
    cursor = DBconnection.cursor()

    # Query PatentDb
    cursor.execute('SELECT * FROM ' + PatentDb + '.application;')
    # Question: do we need all the cols? It seems unnecessary

    # Convert what we obtain from the DB and make it a large list
    AllPatentData = list(cursor.fetchall())


    # Do I need to transform datetime into string? Well, it doesn't matter...
    # loop one by one and ...
    for i in xrange(len(AllPatentData)):
        # the original type is tuple, about which we are not able to modify its values.
        # So make it a list
        AllPatentData[i] = list(AllPatentData[i])
        # Transform the datetime type into a string.
        #if type(AllAppData[i][5]) == datetime.date:
        #    AllAppData[i][5] = AllAppData[i][5].strftime("%m/%d/%y")

    # commit what we have done to the DB
    # Though it is useless here, please remember always include it when you are using
    # MySQLdb module to work with DB.
    DBconnection.commit()

    # dump the Patent table in memory
    return AllPatentData


def transform(folder,host,username,password,appdb,patdb):
    import MySQLdb,re
    
    """
    This function unifies the format of Patent info

    :param PatInput: the variable we used to save all the application info generated by GetAppTable
    :param WorkingDriectory: Full path where we save the output
    :return: returns nothing but will generate "application_correct.csv"
    """
    PatInput = GetAppTable(host,username,password,patdb)
    
    import mechanize,os,csv
    br = mechanize.Browser()
    files = ['application_correct.csv']
    for f in files:
        url = 'http://www.dev.patentsview.org/data/'+f
        br.retrieve(url,os.path.join(folder,f))
    inp = csv.reader(file(os.path.join(folder,'application_correct.csv'),'rb'))
    inp.next()
    check_dupl_appnums = set()
    for i in inp:
        check_dupl_appnums.add(i[0]+'_'+i[1])

    AppCorrectOutput = csv.writer(open(os.path.join(folder,files[0]),'ab'))
    for i in PatInput:
        # unify the ID
        if re.sub('6\s+','',i[3]).startswith('D'):
            # if so, directly write patent_number, application_number (with space removed) and type "D"
            if i[1]+'_'+re.sub('\s+','',i[3]) not in check_dupl_appnums:
                AppCorrectOutput.writerow([i[1],re.sub('\s+','',i[3]),'D'])
        elif len(re.sub('\s+','',i[3]))<8:
            # fill prefix 0s
            if i[1]+'_'+'0'+re.sub('\s+','',i[3]) not in check_dupl_appnums:
                AppCorrectOutput.writerow([i[1],'0'+re.sub('\s+','',i[3]),'0'+re.sub('\s+','',i[3])[0]])
        else:
            if i[1]+'_'+re.sub('\s+','',i[3]) not in check_dupl_appnums:
                AppCorrectOutput.writerow([i[1],re.sub('\s+','',i[3]),re.sub('\s+','',i[3])[:2]])
    
    mydb = MySQLdb.connect(host=host,
        user=username,
        passwd=password)
    cursor = mydb.cursor()
    
    if patdb:
        ### Correct lawyer tables ###
        tables = [patdb+'.lawyer',patdb+'.rawlawyer']
        for t in tables:
            # Get columns
            cursor.execute('SHOW columns from '+t)
            raw = [f[:2] for f in cursor.fetchall() if f[0]!='sequence']
            #Change blanks and UNKNOWN to NULL
            for ro in raw:
                r = ro[0]
                cursor.execute('select country from '+t+' where '+r+' = "" or '+r+'="UNKNOWN" limit 10')
                if len(cursor.fetchall()) > 0:
                    try:
                        cursor.execute('alter table '+t+' add column '+r+'_transformed '+ro[1])
                    except:
                        pass
                    cursor.execute('update '+t+' set '+r+'_transformed = '+r)
                    cursor.execute('update '+t+' set '+r+'_transformed = NULL where '+r+'="" OR '+r+'="UNKNOWN"')
            mydb.commit()
        
        ### Change SIR to statutory invention registration in patent type ###
        cursor.execute('update '+patdb+'.patent set type = "statutory invention registration" where type = "SIR"')
        mydb.commit()
        
        ### Change country codes with X in rawlocation ###
        try:
            cursor.execute('alter table '+patdb+'.rawlocation add column country_transformed varchar(10)')
        except:
            pass
        cursor.execute('update '+patdb+'.rawlocation set country_transformed = country')
        cursor.execute('update '+patdb+'.rawlocation set country_transformed = NULL where country = "" OR country = "unknown"')
        cursor.execute('update '+patdb+'.rawlocation set country_transformed = left(country,2) where length(country) >= 3')
        mydb.commit()
        
        ### Update application numbers for broken records ###
        inp = csv.reader(file(os.path.join(folder,'application_correct.csv'),'rb'))
        inp.next()
        try:
            cursor.execute('alter table '+patdb+'.application add column id_transformed varchar(36), add column number_transformed varchar(64), add column series_code_transformed_from_type varchar(20)')
            mydb.commit()
        except:
            pass
        cursor.execute('update '+patdb+'.application set id_transformed = id,number_transformed = number,series_code_transformed_from_type=type')
        mydb.commit()
        for i in inp:
            if i[2] == 'D':
                cursor.execute('update '+patdb+'.application set id_transformed="'+i[1]+'",number_transformed="'+i[1]+'",series_code_transformed_from_type="D" where patent_id = "'+i[0]+'"')
            else:
                # Double check this field for post-2015 patents
                cursor.execute('update '+patdb+'.application set id_transformed="'+i[1][:2]+'/'+i[1][2:]+'",number_transformed="'+i[1]+'",series_code_transformed_from_type="'+i[2]+'" where patent_id = "'+i[0]+'"')
        mydb.commit()
        
        ### Transform application_id and number in usapplicationcitation table ###
        try:
            cursor.execute('alter table '+patdb+'.usapplicationcitation add column application_id_transformed varchar(36), add column number_transformed varchar(64)')
            mydb.commit()
        except:
            pass
        cursor.execute('select application_id,number from '+patdb+'.usapplicationcitation')
        fields = list(cursor.fetchall())
        for f in fields:
            idnum = f[0][:5]+f[0][:4]+f[0][5:]
            numb = f[1].replace('/','')
            cursor.execute('update '+patdb+'.usapplicationcitation set application_id_transformed = "'+idnum+'",number_transformed = "'+numb+'" where application_id = "'+f[0]+'"')
        mydb.commit()
    if appdb:
        ### Change country codes with X in rawlocation ###
        try:
            cursor.execute('alter table '+appdb+'.rawlocation add column country_transformed varchar(10)')
        except:
            pass
        cursor.execute('update '+appdb+'.rawlocation set country_transformed = country')
        cursor.execute('update '+appdb+'.rawlocation set country_transformed = NULL where country = "" OR country = "unknown"')
        cursor.execute('select id,country from '+appdb+'.rawlocation where length(country)>=3')
        fields = cursor.fetchall()
        for f in fields:
            countries  = set([re.sub('\s','',i) for i in f[1].split(" ") if re.sub('\s','',i) != ''])
            cursor.execute('update '+appdb+'.rawlocation set country_transformed = "'+list(countries)[0]+'" where id = "'+f[0]+'"')
        mydb.commit()

def update_appnums(folder,host,username,password,appdb): 
    import MySQLdb,re,datetime
    
    import mechanize,os,csv
    br = mechanize.Browser()
    files = ['appnums_correct_grant.csv']
    
    for f in files:
        url = 'http://www.dev.patentsview.org/data/'+f
        br.retrieve(url,os.path.join(folder,f))
    
    mydb = MySQLdb.connect(host=host,
        user=username,
        passwd=password)
    cursor = mydb.cursor()
    
    cursor.execute('select * from '+appdb+'.application')
    nums = [list(f) for f in cursor.fetchall()]
    inp = csv.reader(file(os.path.join(folder,files[0]),'rb'))
    outp = open(os.path.join(folder,'appnums_tmp.csv'),'wb')
    tmp = csv.writer(outp,delimiter='\t')
    data = {}
    for i in inp:
        data[i[0]] = i
    for n in nums:
        gg = data[n[2]]
        tmp.writerow(n[:7]+[gg[-1]]+n[8:]+[gg[-2]])
    outp.close()
    cursor.execute('load data local infile "'+folder+'/appnums_tmp.csv'+'" into table '+appdb+'.application_update fields optionally enclosed by '+"'"+'"'+"'"+' terminated by "\t" lines terminated by "\n"')
    mydb.commit()
    
